	
	$(function () {
		var ol1=$("#ol1");
		var ol2=$("#ol2");
		var ol3=$("#ol3");
		var text1=$("#text1");
		var text2=$("#text2");
		var text3=$("#text3");
		var json1=[
			{
				a:`简易贪吃蛇实现思路`,
				b:`
简易贪吃蛇实现思路：
1.沙箱模式封装图片加载函数，对外暴露loadImg(imgUrl,Fn)函数，
  其中imgUrl为图片地址（对象），Fn为回调函数。
2.创建整个游戏函数，封装为DrawSnake，单例模式对外暴露DrawSnake（），
 （1）原型中创建随机生成食物函数food，思路为把20（整个游戏以20为一个单
      位）的倍数放入数组，随机取出其中一个。
 （2）初始化蛇身
 （3）蛇头移动（headMove（））
    a.每次移动之前获取当前的蛇头坐标
    b.重新获取蛇身节点
    c.若屏幕宽度小于768，则认为是手机端，显示控制按钮，否则为键盘控制
    d.初始化四个方向布尔值，按钮或键盘改变的是布尔值真假，每次只有一个
      为真
    e.若蛇头碰撞到四周，则over为true；若蛇头碰到蛇身，则over为true。
 （4）蛇身移动
    a.bodyMoveDelete（），未吃到食物，则删除蛇尾，并把蛇尾添加到蛇头
    b.bodyMoveClone（），吃到食物，则复制蛇头节点为新节点，修改坐标为原
      蛇头坐标，添加到蛇头，并重新生成食物
 （5）bodyArr（）
    a.所有蛇身坐标存入数组，用以判断蛇头是否撞到蛇身，即蛇头坐标等于数
      组其中的一个
    b.用蛇身的长度来确定得分
3.设置游戏难度
   通过点击难度按钮修改定时器执行时间
`
			},
			{
				a:`执行上下文栈`,
				b:`顺序执行？

如果要问到 JavaScript 代码执行顺序的话，想必写过 JavaScript 的开发者都会有个直观的印象，那就是顺序执行，毕竟：

var foo = function () {

    console.log('foo1');

}

foo();  // foo1

var foo = function () {

    console.log('foo2');

}

foo(); // foo2
然而去看这段代码：

function foo() {

    console.log('foo1');

}

foo();  // foo2

function foo() {

    console.log('foo2');

}

foo(); // foo2
打印的结果却是两个 foo2。

刷过面试题的都知道这是因为 JavaScript 引擎并非一行一行地分析和执行程序，而是一段一段地分析执行。当执行一段代码的时候，会进行一个“准备工作”，比如第一个例子中的变量提升，和第二个例子中的函数提升。

但是本文真正想让大家思考的是：这个“一段一段”中的“段”究竟是怎么划分的呢？

到底JavaScript引擎遇到一段怎样的代码时才会做“准备工作”呢？

可执行代码

这就要说到 JavaScript 的可执行代码(executable code)的类型有哪些了？

其实很简单，就三种，全局代码、函数代码、eval代码。

举个例子，当执行到一个函数的时候，就会进行准备工作，这里的“准备工作”，让我们用个更专业一点的说法，就叫做"执行上下文(execution context)"。

执行上下文栈

接下来问题来了，我们写的函数多了去了，如何管理创建的那么多执行上下文呢？

所以 JavaScript 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文

为了模拟执行上下文栈的行为，让我们定义执行上下文栈是一个数组：

ECStack = [];
试想当 JavaScript 开始要解释执行代码的时候，最先遇到的就是全局代码，所以初始化的时候首先就会向执行上下文栈压入一个全局执行上下文，我们用 globalContext 表示它，并且只有当整个应用程序结束的时候，ECStack 才会被清空，所以 ECStack 最底部永远有个 globalContext：

ECStack = [
    globalContext
];
现在 JavaScript 遇到下面的这段代码了：

function fun3() {
    console.log('fun3')
}

function fun2() {
    fun3();
}

function fun1() {
    fun2();
}

fun1();
当执行一个函数的时候，就会创建一个执行上下文，并且压入执行上下文栈，当函数执行完毕的时候，就会将函数的执行上下文从栈中弹出。知道了这样的工作原理，让我们来看看如何处理上面这段代码：

// 伪代码

// fun1()
ECStack.push(<fun1> functionContext);

// fun1中竟然调用了fun2，还要创建fun2的执行上下文
ECStack.push(<fun2> functionContext);

// 擦，fun2还调用了fun3！
ECStack.push(<fun3> functionContext);

// fun3执行完毕
ECStack.pop();

// fun2执行完毕
ECStack.pop();

// fun1执行完毕
ECStack.pop();

// javascript接着执行下面的代码，但是ECStack底层永远有个globalContext
解答思考题

好啦，现在我们已经了解了执行上下文栈是如何处理执行上下文的，所以让我们看看上篇文章《JavaScript深入之词法作用域和动态作用域》最后的问题：

var scope = "global scope";
function checkscope(){
    var scope = "local scope";
    function f(){
        return scope;
    }
    return f();
}
checkscope();
var scope = "global scope";
function checkscope(){
    var scope = "local scope";
    function f(){
        return scope;
    }
    return f;
}
checkscope()();
两段代码执行的结果一样，但是两段代码究竟有哪些不同呢？

答案就是执行上下文栈的变化不一样。

让我们模拟第一段代码：

ECStack.push(<checkscope> functionContext);
ECStack.push(<f> functionContext);
ECStack.pop();
ECStack.pop();
让我们模拟第二段代码：

ECStack.push(<checkscope> functionContext);
ECStack.pop();
ECStack.push(<f> functionContext);
ECStack.pop();
是不是有些不同呢？

当然了，这样概括的回答执行上下文栈的变化不同，是不是依然有一种意犹未尽的感觉呢，为了更详细讲解两个函数执行上的区别，我们需要探究一下执行上下文到底包含了哪些内容，所以欢迎阅读下一篇《JavaScript深入之变量对象》。`
			},
			{
				a:`执行上下文`,
				b:`在上篇《JavaScript深入之执行上下文栈》中讲到，当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。

对于每个执行上下文，都有三个重要属性：

变量对象(Variable object，VO)
作用域链(Scope chain)
this
今天重点讲讲创建变量对象的过程。

变量对象

变量对象是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。

因为不同执行上下文下的变量对象稍有不同，所以我们来聊聊全局上下文下的变量对象和函数上下文下的变量对象。

全局上下文

我们先了解一个概念，叫全局对象。在 W3School 中也有介绍：

全局对象是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。
在顶层 JavaScript 代码中，可以用关键字 this 引用全局对象。因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。
例如，当JavaScript 代码引用 parseInt() 函数时，它引用的是全局对象的 parseInt 属性。全局对象是作用域链的头，还意味着在顶层 JavaScript 代码中声明的所有变量都将成为全局对象的属性。
如果看的不是很懂的话，容我再来介绍下全局对象:

1.可以通过 this 引用，在客户端 JavaScript 中，全局对象就是 Window 对象。

console.log(this);
2.全局对象是由 Object 构造函数实例化的一个对象。

console.log(this instanceof Object);
3.预定义了一堆，嗯，一大堆函数和属性。

// 都能生效
console.log(Math.random());
console.log(this.Math.random());
4.作为全局变量的宿主。

var a = 1;
console.log(this.a);
5.客户端 JavaScript 中，全局对象有 window 属性指向自身。

var a = 1;
console.log(window.a);

this.window.b = 2;
console.log(this.b);
花了一个大篇幅介绍全局对象，其实就想说：

全局上下文中的变量对象就是全局对象呐！

函数上下文

在函数上下文中，我们用活动对象(activation object, AO)来表示变量对象。

活动对象和变量对象其实是一个东西，只是变量对象是规范上的或者说是引擎实现上的，不可在 JavaScript 环境中访问，只有到当进入一个执行上下文中，这个执行上下文的变量对象才会被激活，所以才叫 activation object 呐，而只有被激活的变量对象，也就是活动对象上的各种属性才能被访问。

活动对象是在进入函数上下文时刻被创建的，它通过函数的 arguments 属性初始化。arguments 属性值是 Arguments 对象。

执行过程

执行上下文的代码会分成两个阶段进行处理：分析和执行，我们也可以叫做：

进入执行上下文
代码执行
进入执行上下文

当进入执行上下文时，这时候还没有执行代码，

变量对象会包括：

函数的所有形参 (如果是函数上下文)

由名称和对应值组成的一个变量对象的属性被创建
没有实参，属性值设为 undefined
函数声明

由名称和对应值（函数对象(function-object)）组成一个变量对象的属性被创建
如果变量对象已经存在相同名称的属性，则完全替换这个属性
变量声明

由名称和对应值（undefined）组成一个变量对象的属性被创建；
如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性
举个例子：

function foo(a) {
  var b = 2;
  function c() {}
  var d = function() {};

  b = 3;

}

foo(1);
在进入执行上下文后，这时候的 AO 是：

AO = {
    arguments: {
        0: 1,
        length: 1
    },
    a: 1,
    b: undefined,
    c: reference to function c(){},
    d: undefined
}
代码执行

在代码执行阶段，会顺序执行代码，根据代码，修改变量对象的值

还是上面的例子，当代码执行完后，这时候的 AO 是：

AO = {
    arguments: {
        0: 1,
        length: 1
    },
    a: 1,
    b: 3,
    c: reference to function c(){},
    d: reference to FunctionExpression "d"
}
到这里变量对象的创建过程就介绍完了，让我们简洁的总结我们上述所说：

全局上下文的变量对象初始化是全局对象

函数上下文的变量对象初始化只包括 Arguments 对象

在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值

在代码执行阶段，会再次修改变量对象的属性值`
			}
		]

		var json2=[
			{
				a:`习近平主持金砖国家领导人非正式会晤`,
				b:`新华社德国汉堡7月7日电（记者霍小光　蒋国鹏　刘畅）国家主席习近平7日在汉堡主持金砖国家领导人非正式会晤，发表引导性讲话和总结讲话。南非总统祖马、巴西总统特梅尔、俄罗斯总统普京、印度总理莫迪出席。5国领导人围绕世界政治经济形势和二十国集团重点议题深入交换意见，就金砖国家加强团结协作、合力构建开放型世界经济、完善全球经济治理、促进可持续发展达成重要共识。
	　　习近平在讲话中指出，当前，世界经济出现一些积极迹象，金砖国家发展前景普遍向好，令人振奋；同时，也出现一些需要金砖国家密切关注、妥善应对的挑战。这次二十国集团领导人峰会正值世界政治经济形势面临深刻调整的重要时刻。金砖国家是二十国集团重要成员，要支持主席国德国办好汉堡峰会，发出二十国集团致力于加强伙伴关系、建设开放型世界经济、稳定和促进全球经济增长的积极信号。
	　　习近平强调，金砖国家要发扬开放包容、合作共赢的伙伴精神，加强团结合作，维护共同利益，谋求联动发展。
	　　第一，我们要毫不动摇构建开放型世界经济，维护多边贸易体制，推动经济全球化向开放、包容、普惠、平衡、共赢方向发展，让全体人民分享经济增长和经济全球化的成果。
	　　第二，我们要毫不动摇奉行多边主义，共同推动各方以政治和和平方式解决地区冲突和争端，努力实现各国和平共处、合作共赢，倡导国际社会充分利用联合国等多边机制，共商国际规则，共建伙伴关系，共同应对各种全球性挑战。
	　　第三，我们要毫不动摇加强全球经济治理，共同巩固二十国集团作为国际经济合作主要论坛的地位，推动主要经济体加强宏观经济政策协调，落实好二十国集团领导人杭州峰会及历届峰会共识，为新兴市场国家和发展中国家创造良好发展环境。
	　　第四，我们要毫不动摇推动共同发展，推动二十国集团落实杭州峰会有关2030年可持续发展议程的行动计划以及支持非洲和最不发达国家工业化的倡议，带动国际社会向广大发展中国家特别是非洲国家提供支持，帮助他们提高发展能力，力争实现跨越式发展。
	　　习近平强调，两个月之后，金砖国家领导人会晤将在中国厦门举行。目前，会晤各项筹备工作进展顺利。我期待着届时同大家围绕“深化金砖伙伴关系，开辟更加光明未来”主题，共同推动厦门会晤取得丰硕成果，为深化金砖合作注入新动力，为完善全球治理提供新方案，为促进世界经济增长作出新贡献。
	　　与会各国领导人认为，当前形势下，金砖国家面临机遇和挑战。金砖国家应该保持金砖合作政治、经济、人文协同并进的良好势头，推动各领域务实合作不断走深，不断提升金砖国家凝聚力和影响力。引导二十国集团发出积极信息，推动国际秩序朝着更加公正合理方向发展，努力为新兴市场和发展中国家创造稳定、开放、包容、普惠的发展环境。
	　　与会各国领导人一致支持中国办好金砖国家领导人厦门会晤，赞赏中方为举办会晤所作努力，表示愿同中方一道，推动会晤取得积极成果。
	　　王沪宁、汪洋、栗战书、杨洁篪等参加会晤。`
			},
			{
				a:`首位登上辽宁舰香港民众：向祖国敬礼`,
				b:`7日上午，正在执行跨区机动训练任务的中国人民解放军海军航母编队抵达香港，参加香港回归祖国暨中国人民解放军进驻香港20周年庆祝活动，受到香港特区政府和民众热烈欢迎。
	编队在香港期间，将举行甲板招待会，与香港各界代表共同庆祝香港回归祖国暨中国人民解放军进驻香港20周年；安排舰艇开放，将有近5万人次参观编队航母和属舰；组织官兵深入社区，与慈善机构共同开展公益活动和社会服务。舰艇开放参观期间，香港同胞可以登舰与舰员交流。
	8日上午，航母编队向香港同胞开放参观。这是辽宁舰第一次向公众开放，也是舰载战斗机第一次集中展示。
	首位登上辽宁舰的香港民众获赠了辽宁舰舰帽，并向祖国频频敬礼。面对新华社记者，这位民众激动地说：“我觉得很自豪，我觉得很自豪。（辽宁舰）是中国第一艘的（航母），也是代表我们国家的。”
	（原题为《首位登上辽宁舰香港民众：向祖国敬礼“我很自豪”》）`
			},
			{
				a:`章莹颖案续：曝嫌犯打算实行无罪辩护`,
				b:`在2016年的G20中国杭州峰会，时任美国总统奥巴马获安排站在东道主，中国国家主席习近平的右侧第二位置。
而在2015年G20土耳其安塔利亚峰会期间，奥巴马更获东道主，土耳其总统埃尔多安安排站在其左侧身旁。
就特朗普与其他西方国家对《巴黎气候协定》的观点分歧，法新社7日报道指出，其余18国和欧盟领袖在气候政策讨论上，已忽略特朗普对全球变暖所持的怀疑态度，表明会联同美国以外的成员国谨守该“不容取消的”协定。
（原标题：特朗普G20“靠边站” 大合照美元首遭罕见冷落）`
			}
		];
		var json3=[
			{
				a:`习近平主持金砖国家领导人非正式会晤`,
				b:`新华社德国汉堡7月7日电（记者霍小光　蒋国鹏　刘畅）国家主席习近平7日在汉堡主持金砖国家领导人非正式会晤，发表引导性讲话和总结讲话。南非总统祖马、巴西总统特梅尔、俄罗斯总统普京、印度总理莫迪出席。5国领导人围绕世界政治经济形势和二十国集团重点议题深入交换意见，就金砖国家加强团结协作、合力构建开放型世界经济、完善全球经济治理、促进可持续发展达成重要共识。
	　　习近平在讲话中指出，当前，世界经济出现一些积极迹象，金砖国家发展前景普遍向好，令人振奋；同时，也出现一些需要金砖国家密切关注、妥善应对的挑战。这次二十国集团领导人峰会正值世界政治经济形势面临深刻调整的重要时刻。金砖国家是二十国集团重要成员，要支持主席国德国办好汉堡峰会，发出二十国集团致力于加强伙伴关系、建设开放型世界经济、稳定和促进全球经济增长的积极信号。
	　　习近平强调，金砖国家要发扬开放包容、合作共赢的伙伴精神，加强团结合作，维护共同利益，谋求联动发展。
	　　第一，我们要毫不动摇构建开放型世界经济，维护多边贸易体制，推动经济全球化向开放、包容、普惠、平衡、共赢方向发展，让全体人民分享经济增长和经济全球化的成果。
	　　第二，我们要毫不动摇奉行多边主义，共同推动各方以政治和和平方式解决地区冲突和争端，努力实现各国和平共处、合作共赢，倡导国际社会充分利用联合国等多边机制，共商国际规则，共建伙伴关系，共同应对各种全球性挑战。
	　　第三，我们要毫不动摇加强全球经济治理，共同巩固二十国集团作为国际经济合作主要论坛的地位，推动主要经济体加强宏观经济政策协调，落实好二十国集团领导人杭州峰会及历届峰会共识，为新兴市场国家和发展中国家创造良好发展环境。
	　　第四，我们要毫不动摇推动共同发展，推动二十国集团落实杭州峰会有关2030年可持续发展议程的行动计划以及支持非洲和最不发达国家工业化的倡议，带动国际社会向广大发展中国家特别是非洲国家提供支持，帮助他们提高发展能力，力争实现跨越式发展。
	　　习近平强调，两个月之后，金砖国家领导人会晤将在中国厦门举行。目前，会晤各项筹备工作进展顺利。我期待着届时同大家围绕“深化金砖伙伴关系，开辟更加光明未来”主题，共同推动厦门会晤取得丰硕成果，为深化金砖合作注入新动力，为完善全球治理提供新方案，为促进世界经济增长作出新贡献。
	　　与会各国领导人认为，当前形势下，金砖国家面临机遇和挑战。金砖国家应该保持金砖合作政治、经济、人文协同并进的良好势头，推动各领域务实合作不断走深，不断提升金砖国家凝聚力和影响力。引导二十国集团发出积极信息，推动国际秩序朝着更加公正合理方向发展，努力为新兴市场和发展中国家创造稳定、开放、包容、普惠的发展环境。
	　　与会各国领导人一致支持中国办好金砖国家领导人厦门会晤，赞赏中方为举办会晤所作努力，表示愿同中方一道，推动会晤取得积极成果。
	　　王沪宁、汪洋、栗战书、杨洁篪等参加会晤。`
			},
			{
				a:`首位登上辽宁舰香港民众：向祖国敬礼`,
				b:`7日上午，正在执行跨区机动训练任务的中国人民解放军海军航母编队抵达香港，参加香港回归祖国暨中国人民解放军进驻香港20周年庆祝活动，受到香港特区政府和民众热烈欢迎。
	编队在香港期间，将举行甲板招待会，与香港各界代表共同庆祝香港回归祖国暨中国人民解放军进驻香港20周年；安排舰艇开放，将有近5万人次参观编队航母和属舰；组织官兵深入社区，与慈善机构共同开展公益活动和社会服务。舰艇开放参观期间，香港同胞可以登舰与舰员交流。
	8日上午，航母编队向香港同胞开放参观。这是辽宁舰第一次向公众开放，也是舰载战斗机第一次集中展示。
	首位登上辽宁舰的香港民众获赠了辽宁舰舰帽，并向祖国频频敬礼。面对新华社记者，这位民众激动地说：“我觉得很自豪，我觉得很自豪。（辽宁舰）是中国第一艘的（航母），也是代表我们国家的。”
	（原题为《首位登上辽宁舰香港民众：向祖国敬礼“我很自豪”》）`
			},
			{
				a:`章莹颖案续：曝嫌犯打算实行无罪辩护`,
				b:`在2016年的G20中国杭州峰会，时任美国总统奥巴马获安排站在东道主，中国国家主席习近平的右侧第二位置。
而在2015年G20土耳其安塔利亚峰会期间，奥巴马更获东道主，土耳其总统埃尔多安安排站在其左侧身旁。
就特朗普与其他西方国家对《巴黎气候协定》的观点分歧，法新社7日报道指出，其余18国和欧盟领袖在气候政策讨论上，已忽略特朗普对全球变暖所持的怀疑态度，表明会联同美国以外的成员国谨守该“不容取消的”协定。
（原标题：特朗普G20“靠边站” 大合照美元首遭罕见冷落）`
			}
		];
		function addCon(json,ol,text) {
			var len=json.length;
			var li="";
			for (var i = 0; i < len; i++) {
				li+=`<li>
							<a href="javascript:void(0)">
	                                `+json[i].a+`
	                        </a>
	                    </li>`
			}
			ol.html(li);
			var aArr=ol.find("a");
			aArr.eq(0).addClass("current");
			//str:内容
			var str=json[0].b;
			
			text.html(str);
			aArr.on("click",function () {
				$(this).addClass("current").parent().siblings("li").children("a").removeClass("current");
				str=json[$(this).parent().index()].b;
				text.html(str);
			})
		}
		addCon(json1,ol1,text1);
		addCon(json2,ol2,text2);
		addCon(json3,ol3,text3);
		// var len=json.length;
		// var li="";
		// for (var i = 0; i < len; i++) {
		// 	li+=`<li>
		// 				<a href="javascript:void(0)">
  //                               `+json[i].a+`
  //                       </a>
  //                   </li>`
		// }
		// ol1.html(li);
		// var aArr=ol1.find("a");
		// aArr.eq(0).addClass("current");
		// //str:内容
		// var str=json[0].b;
		
		// text1.text(str);

		// aArr.on("click",function () {
		// 	$(this).addClass("current").parent().siblings("li").children("a").removeClass("current");
		// 	str=json[$(this).parent().index()].b;
		// 	text1.text(str);
		// })

		//展开
		var open=$(".myOpen");
		var count=0;
		open.on("click",function () {
			$(this).parent(".content").find(".content-right").stop().slideToggle();
			 // ol1.parents(".content-right").stop().slideToggle();
			 count++;
			 if(count%2!==0){
			 	$(this).text("隐藏");
			 }else {
			 	$(this).text("展开");
			 }
		})

	})